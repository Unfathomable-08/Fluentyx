import { useState } from 'react';

export function FillBlank({ chapter, index, data, setStep, isActive }) {
  const [selected, setSelected] = useState(null);
  const [correctIndex, setCorrectIndex] = useState(null);
  const [wrongIndex, setWrongIndex] = useState(null);

  // for hover effect
  const [hover, setHover] = useState(null);

  if (!data || data.length === 0) return null;

  // Map index to pronoun category
  const pronounCategories = {
    1: { key: "First Person Pronouns", data: data[0]["First Person Pronouns"] },
    2: { key: "Second Person Pronouns", data: data[1]["Second Person Pronouns"] },
    3: { key: "Third Person Pronouns", data: data[2]["Third Person Pronouns"] },
  };

  // Get the pronoun category for the given index
  const currentCategory = pronounCategories[index];
  if (!currentCategory || !currentCategory.data || currentCategory.data.length === 0) return null;

  // Get all pronouns and their example sentences
  const pronouns = currentCategory.data;
  
  // Collect all example sentences
  const allExamples = pronouns.flatMap(pronoun => pronoun.examples);
  if (allExamples.length === 0) return null;

  // Select a random sentence
  const randomExampleIndex = Math.floor(Math.random() * allExamples.length);
  const selectedExample = allExamples[randomExampleIndex];

  // Find the pronoun corresponding to the selected sentence
  const correctPronoun = pronouns.find(pronoun => 
    pronoun.examples.some(example => example.id === selectedExample.id && example.sentence === selectedExample.sentence)
  );
  if (!correctPronoun) return null;

  // Replace the pronoun in the sentence with a dash
  const sentenceWithBlank = selectedExample.sentence.replace(correctPronoun.arabic, '____');
  const selectedWord2Word = selectedExample.word2word;

  // Get pronoun options from the same category (up to 4, or fewer if limited)
  const pronounOptions = pronouns
    .filter(pronoun => pronoun.person === correctPronoun.person)
    .sort(() => 0.5 - Math.random())
    .slice(0, Math.min(4, pronouns.length));

  // Ensure the correct pronoun is included in the options
  if (!pronounOptions.some(opt => opt.arabic === correctPronoun.arabic)) {
    pronounOptions[Math.floor(Math.random() * pronounOptions.length)] = correctPronoun;
  }

  // Shuffle the options
  const options = pronounOptions.sort(() => 0.5 - Math.random());

  const handleClick = (opt, i) => {
    if (correctIndex !== null) return; // Prevent further clicks after correct answer
    if (opt.arabic === correctPronoun.arabic) {
      setCorrectIndex(i); // Mark correct answer
      setStep(prev => prev + 1);
    } else {
      setWrongIndex(i); // Mark wrong answer
      setTimeout(() => {
        setWrongIndex(null); // Clear wrong selection after 1 second
        setSelected(null); // Allow another selection
      }, 1000);
    }
    setSelected(i); // Track the selected option
  };

  if (!isActive) return null;
  return (
    <div className="flex flex-col items-center p-8 gap-y-16">
      {/* Sentence with blank */}
      <div className="bg-white md:mt-16 rounded-xl w-full max-w-md p-4 flex items-center justify-center shadow-[0_0_10px_#00000055] arabic">
        {sentenceWithBlank.split(" ").map((word, i) => (
            <span className="px" key={i}>{word}</span>
        ))}
      </div>

      {/* Pronoun Options */}
      <div className="grid grid-cols-2 gap-4 w-[240px]">
        {options.map((opt, i) => {
          const isCorrect = correctIndex !== null && opt.arabic === correctPronoun.arabic;
          const isWrong = wrongIndex === i;
          return (
            <div
              key={i}
              onClick={() => handleClick(opt, i)}
              className={`text-xl font-bold flex items-center justify-center border border-gray-300 aspect-[5/4] shadow-[0_0_10px_#00000055] text-center rounded-xl cursor-pointer 
                ${isCorrect ? 'bg-green-400 text-white' : ''}
                ${isWrong ? 'bg-red-400 text-white' : ''}
              `}
            >
              {opt.arabic}
            </div>
          );
        })}
      </div>
    </div>
  );
}